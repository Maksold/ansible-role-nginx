## Maps config file
include conf.d/magento2/maps.conf;

{% if nginx_acme_challenge_enabled %}
## certbot-auto renew webroot
server {
    listen 80;
    listen [::]:80;
    server_name {{ nginx_domains | join(' ') }};

    ## Set main public directory
    root {{ nginx_root }};

    location ~ /\.well-known/acme-challenge {
        allow all;
        default_type "text/plain";
        try_files $uri =404;
    }

    location / { return 301 https://{{ nginx_domains | first }}$request_uri;  }
}
{% endif %}

## Proxy server to terminate SSL before Varnish or PHP backend
server {
    {% if nginx_ssl_enabled %}
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    ssl_certificate /etc/letsencrypt/live/{{ nginx_domains | first }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ nginx_domains | first }}/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/{{ nginx_domains | first }}/chain.pem;
    {% else %}
    # Temporary port to generate first letsencrypt cert and then set nginx_ssl_enabled = True
    listen 81;
    listen [::]:81;
    {% endif %}
    server_name {{ nginx_domains | join(' ') }};

    ## Set Magento root folder
    set $MAGE_ROOT {{ nginx_root }};
    ## Set main public directory /pub
    root $MAGE_ROOT/pub;

    ## Gzipping is an easy way to reduce page weight
    gzip                on;
    gzip_vary           on;
    gzip_proxied        any;
    gzip_types          application/javascript application/x-javascript application/rss+xml text/javascript text/css text/plain image/x-icon image/svg+xml;
    gzip_buffers        4 16k;
    gzip_comp_level     6;

    # Brotli compression alternative to Gzip
    #brotli              on;
    #brotli_types        text/xml image/svg+xml application/x-font-ttf image/vnd.microsoft.icon application/x-font-opentype application/json font/eot application/vnd.ms-fontobject application/javascript font/otf application/xml application/xhtml+xml text/javascript application/x-javascript text/plain application/x-font-truetype application/xml+rss image/x-icon font/opentype text/css image/x-win-bitmap;
    #brotli_comp_level   8;

    if ($bad_client) { return 403; }

    ## Server maintenance block.
    include conf.d/magento2/maintenance.conf;

    {% if nginx_rabbitmq_proxy_enabled %}
    ## RabbitMQ proxy
    include conf.d/magento2/rabbitmq_proxy.conf;
    {% endif %}

    {% if nginx_supervisor_proxy_enabled %}
    ## Supervisor proxy
    include conf.d/magento2/supervisor_proxy.conf;
    {% endif %}

    location / {
        {% if nginx_varnish_proxy_enabled %}
        ## Proxy-pass to Varnish
        include conf.d/magento2/varnish_proxy.conf;
        {% else %}
        ## Proxy-pass to PHP Backend
        include conf.d/magento2/php_proxy.conf;
        {% endif %}
    }
}

## PHP Backend server
server {
#    listen 127.0.0.1:8080;
    listen 8080;
    listen [::]:8080;
    server_name {{ nginx_domains | join(' ') }};

    ## Set Magento root folder
    set $MAGE_ROOT {{ nginx_root }};
    ## Set main public directory /pub
    root $MAGE_ROOT/pub;

    {% if nginx_auth_basic_enabled %}
    auth_basic $authentication;
    auth_basic_user_file {{ nginx_auth_basic_file }};
    {% endif %}

    ## Process php health_check
    location ~ ^/health_check\.php$ {
        {% if nginx_auth_basic_enabled %}
        auth_basic off;
        {% endif %}
        try_files $uri =404;
        include conf.d/magento2/php_backend.conf;
    }

    ## sitemap and feeds?
    location ^/(robots\.txt|google.*\.html) { root $MAGE_ROOT/pub/media; }
    location ^/sitemap\.xml { root $MAGE_ROOT/pub/media/sitemap; }
    location ~ ^/feeds/.*\.(xml|csv|txt) { root $MAGE_ROOT/pub/media; }

    ## Nginx and php-fpm status
    include conf.d/magento2/status.conf;

    ## Deny all internal locations
    location ~ ^/(app|generated|lib|bin|var|tmp|phpserver|vendor)/ {
        deny all;
    }

    location / {
        try_files $uri /index.php$is_args$args;
    }

    ## Static location
    include conf.d/magento2/assets.conf;

    ## Protect extra directories
    include conf.d/magento2/extra_protect.conf;

    ## Process php files (strict rule, define files to be executed)
    location ~ ^/(index|health_check|get|static|errors/(report|404|503))\.php$ {
        try_files $uri =404;
#        fastcgi_intercept_errors on;
        include conf.d/magento2/php_backend.conf;

        ## Enable Magento profiler
#        fastcgi_param MAGE_PROFILER $MAGE_PROFILER;

        ## Store code with multi domain
#        fastcgi_param   MAGE_RUN_CODE $MAGE_RUN_CODE;
#        fastcgi_param   MAGE_RUN_TYPE $MAGE_RUN_TYPE;

        ## Enable POST logging in admin
#        if ($request_method = POST) {set $adminpost A;}
#        if ($request_uri ~* "/ADMIN_PLACEHOLDER/") {set $adminpost "${adminpost}B";}
#        if ($adminpost = AB) { access_log /var/log/nginx/admin_post.log adminpost;}
    }

    ## Block other undefined php files, possible injections and random malware hooks.
    location ~* \.php$ {
        return 404;
    }
}
