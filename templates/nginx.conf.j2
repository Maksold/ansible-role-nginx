user  {{ nginx_main_template.user }};
worker_processes  {{ nginx_main_template.worker_processes }};
worker_rlimit_nofile {{ nginx_main_template.worker_rlimit_nofile }};

## Load Dynamic Modules ##
#load_module modules/ngx_http_geoip_module.so;
#load_module modules/ngx_http_perl_module.so;
#load_module modules/ngx_http_brotli_filter_module.so;
#load_module modules/ngx_http_brotli_static_module.so;

pid        /var/run/nginx.pid;

events {
    worker_connections  {{ nginx_main_template.worker_connections }};
    multi_accept on;
}

http {
    index         index.html index.php;
    include       mime.types;
    default_type  application/octet-stream;

#    geoip_country /usr/share/GeoIP/GeoIP.dat;

{% for access_log in nginx_main_template.http_settings.access_log_format %}
    log_format  {{ access_log.name }}  {{ access_log.format }};
{% endfor %}
#    log_format  error403  '$remote_addr - [$time_local] "$request" "$http_user_agent" - "$request_id" - "$geoip_country_code"';

    ## Nginx amplify metrics
#    log_format  main_ext '$remote_addr - $remote_user [$time_local] "$request" '
#                         '$status $body_bytes_sent "$http_referer" '
#                         '"$http_user_agent" "$http_x_forwarded_for" '
#                         '"$host" sn="$server_name" '
#                         'rt=$request_time '
#                         'ua="$upstream_addr" us="$upstream_status" '
#                         'ut="$upstream_response_time" ul="$upstream_response_length" '
#                         'cs=$upstream_cache_status' ;

    ## Enable POST logging in admin and mask passwords
#    log_format adminpost '$remote_addr - "$http_x_forwarded_for" $remote_user [$time_local] "$request" "$http_referer" "$http_user_agent" "$masked_post_pwd_data"';
#    perl_set $masked_post_pwd_data '
#                sub {
#                        my $r = shift;
#                        my $req =  $r->request_body;
#    	### test either one line below or create different regex
#    	##  $req =~ s/password(%5D|_.+?)?\=\w+/PASSWORD_REMOVED/g;
#    	##  $req =~ s/password.+/PASSWORD_REMOVED/g;
#                        return $req;
#                    } ';

{% for access_log in nginx_main_template.http_settings.access_log_location %}
    access_log  {{ access_log.location }}  {{ access_log.name }};
{% endfor %}
    error_log  {{ nginx_main_template.error_log.location | default("/var/log/nginx/error.log") }} {{ nginx_main_template.error_log.level | default("warn") }};

    keepalive_timeout   {{ nginx_main_template_keepalive_timeout }};
    autoindex		    off;
    server_tokens       off;
    port_in_redirect	off;
    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;

    client_max_body_size    {{ nginx_main_template_client_max_body_size }};
    client_body_buffer_size {{ nginx_main_template_client_body_buffer_size }};
    client_header_buffer_size {{ nginx_main_template_client_header_buffer_size }};
    large_client_header_buffers {{ nginx_main_template_large_client_header_buffers }};

    fastcgi_buffer_size 32k;
    fastcgi_buffers 16 16k;
	fastcgi_busy_buffers_size 32k;

    proxy_buffer_size 32k;
    proxy_buffers 16 16k;
    proxy_busy_buffers_size 32k;

    # Microcache
#    proxy_cache_path /tmp/nginx levels=1:2 keys_zone=microcache:100M max_size=500M inactive=2h;

    ## Flood protection example (see conf_m2/extra_protect.conf)
    limit_req_zone $binary_remote_addr zone=checkout:35m rate=1r/s;
    limit_req_zone $binary_remote_addr zone=customer:35m rate=1r/s;
    limit_req_zone $binary_remote_addr zone=catalog:35m rate=1r/s;
    #limit_req_zone $binary_remote_addr zone=apiaccess:35m rate=30r/m;
    limit_req_zone $cartId zone=payment:35m rate=10r/m;

    ## Cache open FD
    open_file_cache max=35000 inactive=30s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;

    ##  SSL global settings
	ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers         'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
    ssl_dhparam         /etc/ssl/dhparam-4096.pem;
    ssl_ecdh_curve		secp384r1;
    ssl_buffer_size		4k;
	ssl_session_timeout 30m;
    ssl_session_cache	shared:SSL:45m;
	ssl_session_tickets off;

	# SSL OCSP Stapling
    ssl_stapling        on;
    ssl_stapling_verify on;
	resolver 1.1.1.1 1.0.0.1 8.8.8.8 8.8.4.4 208.67.222.222 208.67.220.220 valid=60s;
    resolver_timeout 3s;

    ## Get real ip from proxy
    set_real_ip_from 127.0.0.1;

    ## ROUTE TO PHP BACKEND NODES
    upstream php_upstream {
#       hash $remote_addr consistent;
#       least_conn;
       server 127.0.0.1:80;
    }

    ## ROUTE TO ADMIN NODE
#    upstream admin {
#       hash $remote_addr consistent;
#       least_conn;
#       server 10.x.x.x;
#       server 10.x.x.x;
#    }

    {% if nginx_supervisor_proxy_enabled %}
    upstream supervisor_upstream {
        server {{ nginx_supervisor_proxy_ip }}:{{ nginx_supervisor_proxy_port }};
    }
    {% endif %}

    {% if nginx_varnish_proxy_enabled %}
    upstream varnish_upstream {
        server {{ nginx_varnish_proxy_ip }}:{{ nginx_varnish_proxy_port }};
    }
    {% endif %}

    ## Main domain configuration
    include /etc/nginx/conf.d/*.conf;
}
