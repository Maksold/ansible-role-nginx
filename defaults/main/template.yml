---
# Enable creating dynamic templated NGINX HTML demo websites.
nginx_html_demo_template_enable: false
nginx_html_demo_template:
  default:
    template_file: www/index.html.j2
    html_file_name: index.html
    html_file_location: /usr/share/nginx/html
    web_server_name: Default

# Enable creating dynamic templated NGINX configuration files.
# Defaults are the values found in a fresh NGINX installation.
nginx_main_template_enable: true
nginx_main_template:
  template_file: nginx.conf.j2
  conf_file_name: nginx.conf
  conf_file_location: /etc/nginx/
  user: "{{ nginx_webuser_name }}"
  worker_processes: auto
  worker_rlimit_nofile: 100000
  worker_connections: 10524
  error_log:
    location: /var/log/nginx/error.log
    level: warn
  http_settings:
    access_log_format:
      - name: main
        format: |-
          '$remote_addr - $remote_user [$time_local] "$request_method $scheme://$host$request_uri $server_protocol" $status $bytes_sent "$http_referer" "$http_user_agent" $request_time - "$request_id"'
    access_log_location:
      - name: main
        location: /var/log/nginx/access.log
    keepalive_timeout: 65


# Enable creating dynamic templated NGINX HTTP configuration files.
# Defaults will not produce a valid configuration. Instead they are meant to showcase
# the options available for templating. Each key represents a new configuration file.
nginx_http_template_enable: true
nginx_http_template:
  fastcgi_params:
    template_file: fastcgi_params
    conf_file_name: fastcgi_params
    conf_file_location: /etc/nginx/
  default:
    template_file: conf.d/default.conf
    conf_file_name: default.conf
    conf_file_location: /etc/nginx/conf.d/
  magento2:
    template_file: conf.d/magento2.conf
    conf_file_name: magento2.conf
    conf_file_location: /etc/nginx/conf.d/
  magento2_assets:
    template_file: conf.d/magento2/assets.conf
    conf_file_name: assets.conf
    conf_file_location: /etc/nginx/conf.d/magento2/
  magento2_cors:
    template_file: conf.d/magento2/cors.conf
    conf_file_name: cors.conf
    conf_file_location: /etc/nginx/conf.d/magento2/
  magento2_extra_protect:
    template_file: conf.d/magento2/extra_protect.conf
    conf_file_name: extra_protect.conf
    conf_file_location: /etc/nginx/conf.d/magento2/
  magento2_maintenance:
    template_file: conf.d/magento2/maintenance.conf
    conf_file_name: maintenance.conf
    conf_file_location: /etc/nginx/conf.d/magento2/
  magento2_maps:
    template_file: conf.d/magento2/maps.conf
    conf_file_name: maps.conf
    conf_file_location: /etc/nginx/conf.d/magento2/
  magento2_php_backend:
    template_file: conf.d/magento2/php_backend.conf
    conf_file_name: php_backend.conf
    conf_file_location: /etc/nginx/conf.d/magento2/
  magento2_rabbitmq_proxy:
    template_file: conf.d/magento2/rabbitmq_proxy.conf
    conf_file_name: rabbitmq_proxy.conf
    conf_file_location: /etc/nginx/conf.d/magento2/
  magento2_status:
    template_file: conf.d/magento2/status.conf
    conf_file_name: status.conf
    conf_file_location: /etc/nginx/conf.d/magento2/
  magento2_php_proxy:
    template_file: conf.d/magento2/php_proxy.conf
    conf_file_name: php_proxy.conf
    conf_file_location: /etc/nginx/conf.d/magento2/
  magento2_varnish_proxy:
    template_file: conf.d/magento2/varnish_proxy.conf
    conf_file_name: varnish_proxy.conf
    conf_file_location: /etc/nginx/conf.d/magento2/


# Enable NGINX 'stub_status' data.
# Will enable 'stub_status' in NGINX Open Source.
# Note - NGINX Plus 'status' has been deprecated since NGINX Plus R13.
# Use the Rest API parameter instead.
# Default is false.
nginx_status_enable: false
nginx_status_template_file: http/status.conf.j2
nginx_status_file_location: /etc/nginx/conf.d/status.conf
nginx_status_log: false
nginx_status_port: 80
nginx_status_allow: 127.0.0.1
nginx_status_deny: all

# Enable NGINX Plus REST API, write access to the REST API, and NGINX Plus dashboard.
# Requires NGINX Plus.
# Default is false.
nginx_rest_api_enable: false
nginx_rest_api_template_file: http/api.conf.j2
nginx_rest_api_file_location: /etc/nginx/conf.d/api.conf
nginx_rest_api_log: false
nginx_rest_api_port: 80
nginx_rest_api_write: false
nginx_rest_api_dashboard: false
nginx_status_rest_api_allow: 127.0.0.1
nginx_status_rest_api_deny: all
nginx_status_rest_api_dashboard_allow: 127.0.0.1
nginx_status_rest_api_dashboard_deny: all

# Enable creating dynamic templated NGINX stream configuration files.
# Defaults will not produce a valid configuration. Instead they are meant to showcase
# the options available for templating. Each key represents a new configuration file.
nginx_stream_template_enable: false
nginx_stream_template:
  default:
    template_file: stream/default.conf.j2
    conf_file_name: default.conf
    conf_file_location: /etc/nginx/conf.d/stream/
    network_streams:
      default:
        listen:
          listen_localhost:
            ip: 0.0.0.0  # Wrap in square brackets for IPv6 addresses
            port: 80
            ssl: false
            opts: []  # Listen opts like udp which will be added (ssl is automatically added if you specify 'ssl:').
        ssl:
          cert: /etc/ssl/certs/default.crt
          key: /etc/ssl/private/default.key
          dhparam: /etc/ssl/private/dh_param.pem
          protocols: TLSv1 TLSv1.1 TLSv1.2
          ciphers: HIGH:!aNULL:!MD5
          prefer_server_ciphers: true
          session_cache: none
          session_timeout: 5m
          disable_session_tickets: false
          trusted_cert: /etc/ssl/certs/root_CA_cert_plus_intermediates.crt
          ecdh_curve: auto
        include_files: []
        proxy_pass: backend
        proxy_timeout: 3s
        proxy_connect_timeout: 1s
        proxy_protocol: false
        proxy_ssl:
          cert: /etc/ssl/certs/proxy_default.crt
          key: /etc/ssl/private/proxy_default.key
          trusted_cert: /etc/ssl/certs/proxy_ca.crt
          protocols: TLSv1 TLSv1.1 TLSv1.2
          ciphers: HIGH:!aNULL:!MD5
          verify: false
          verify_depth: 1
          session_reuse: true
        health_check_plus: false
        # custom_options: []
    upstreams:
      upstream1:
        name: backend
        lb_method: least_conn
        zone_name: backend
        zone_size: 64k
        sticky_cookie: false
        servers:
          server1:
            address: localhost
            port: 8080
            weight: 1
            health_check: max_fails=1 fail_timeout=10s
        # custom_options: []
    # custom_options: []
